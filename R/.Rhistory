samps <- t(rmnorm(n=10000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=1000)
EM_R <- function(rs, t, w, cov, niter=1000){
l <- ncol(rs)
m <- length(t)
n <- length(w)
# Initialize the mu to the mean of the available data
mu <- matrix(rep(0, 2*niter), nrow=2, ncol=niter)
mu[, 1] <- c(mean(c(rs[1, ], t)), mean(c(rs[2, ], w)))
for(i in 2:niter){
u_impute <- mu[2, (i-1)] + cov[2, 1]*(1/cov[1, 1])*(t-mu[1, (i-1)])
v_impute <- mu[1, (i-1)] + cov[1, 2]*(1/cov[2, 2])*(w-mu[2, (i-1)])
mu[, i] <- (1/(l+m+n))*c(sum(rs[1, ])+sum(t)+sum(v_impute),
sum(rs[2, ])+sum(w)+sum(u_impute))
}
return(mu)
}
EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=1000)
test <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=1000)
View(test)
test[,1000]
test <- EM_R(rs=samps[ , 1:700], t=samps[1, 701:750], w=samps[2, 751:1000],
cov=cov, niter=1000)
test[,1000]
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
test <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=1000)
test[,1000]
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
test <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=10000)
test[, 10000]
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
niter <- 10000
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
test <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test[, niter]
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
niter <- 100000
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
test <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test[, niter]
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
niter <- 100000
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
test <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test[, niter]
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(rs), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(1, 0) = mean(c(rs(1, _), t));
mu(2, 0) = mean(c(rs(2, _), w));
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
for (int j = 0; j < m; j++) {
u_impute(j) = mu(2, (i-1)) + cov(2, 1)*(1/cov(1, 1))*(t(j)-mu(1, (i-1)));
}
for (int j = 0; j < n; j++) {
v_impute(j) <- mu(1, (i-1)) + cov(1, 2)*(1/cov(2, 2))*(w(j)-mu(2, (i-1)));
}
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(t)+sum(v_impute));
mu(2, i) = (1/(l+m+n))*(sum(rs(2, _))+sum(w)+sum(u_impute));
}
return mu;
}')
library(Rcpp)
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(rs), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(1, 0) = mean(c(rs(1, _), t));
mu(2, 0) = mean(c(rs(2, _), w));
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
for (int j = 0; j < m; j++) {
u_impute(j) = mu(2, (i-1)) + cov(2, 1)*(1/cov(1, 1))*(t(j)-mu(1, (i-1)));
}
for (int j = 0; j < n; j++) {
v_impute(j) <- mu(1, (i-1)) + cov(1, 2)*(1/cov(2, 2))*(w(j)-mu(2, (i-1)));
}
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(t)+sum(v_impute));
mu(2, i) = (1/(l+m+n))*(sum(rs(2, _))+sum(w)+sum(u_impute));
}
return mu;
}')
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(1, 0) = (sum(rs(1, _))+sum(t))/(l+m);
mu(2, 0) = (sum(rs(2, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
for (int j = 0; j < m; j++) {
u_impute(j) = mu(2, (i-1)) + cov(2, 1)*(1/cov(1, 1))*(t(j)-mu(1, (i-1)));
}
for (int j = 0; j < n; j++) {
v_impute(j) = mu(1, (i-1)) + cov(1, 2)*(1/cov(2, 2))*(w(j)-mu(2, (i-1)));
}
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(t)+sum(v_impute));
mu(2, i) = (1/(l+m+n))*(sum(rs(2, _))+sum(w)+sum(u_impute));
}
return mu;
}')
test <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
rs_RCPP = samps[ , 1:500]
t_RCPP = samps[1, 501:750]
w_RCPP = samps[2, 751:1000]
test <- EM_Rcpp(rs=rs_RCPP, t=t_RCPP, w=w_RCPP,
cov=cov, niter=niter)
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
for (int j = 0; j < m; j++) {
u_impute(j) = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t(j)-mu(0, (i-1)));
}
for (int j = 0; j < n; j++) {
v_impute(j) = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w(j)-mu(1, (i-1)));
}
mu(0, i) = (1/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
test <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test[, niter]
test
View(test)
niter <- 1000
test <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
library(Rcpp)
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
u_impute = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t-mu(0, (i-1)));
v_impute = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w-mu(1, (i-1)));
mu(0, i) = (1/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
test <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test[, niter]
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
return rs(0, _);
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
u_impute = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t-mu(0, (i-1)));
v_impute = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w-mu(1, (i-1)));
mu(0, i) = (1/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
return sum(rs(0, _));
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
u_impute = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t-mu(0, (i-1)));
v_impute = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w-mu(1, (i-1)));
mu(0, i) = (1/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
library(Rcpp)
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
u_impute = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t-mu(0, (i-1)));
v_impute = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w-mu(1, (i-1)));
print(u_impute);
mu(0, i) = (1/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
test <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
library(Rcpp)
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
u_impute = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t-mu(0, (i-1)));
v_impute = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w-mu(1, (i-1)));
mu(0, i) = (1.0/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1.0/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
test <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test[, niter]
View(test)
library(microbenchmark)
microbenchmark(
method = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
generic = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 100000L
)
microbenchmark(
method = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
generic = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 1000L
)
microbenchmark(
method = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
generic = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 100L
)
EM_R <- function(rs, t, w, cov, niter=1000){
l <- ncol(rs)
m <- length(t)
n <- length(w)
# Initialize the mu to the mean of the available data
mu <- matrix(rep(0, 2*niter), nrow=2, ncol=niter)
mu[, 1] <- c(mean(c(rs[1, ], t)), mean(c(rs[2, ], w)))
for(i in 2:niter){
u_impute <- mu[2, (i-1)] + cov[2, 1]*(1/cov[1, 1])*(t-mu[1, (i-1)])
v_impute <- mu[1, (i-1)] + cov[1, 2]*(1/cov[2, 2])*(w-mu[2, (i-1)])
mu[, i] <- (1/(l+m+n))*c(sum(rs[1, ])+sum(t)+sum(v_impute),
sum(rs[2, ])+sum(w)+sum(u_impute))
}
return(mu)
}
# Rcpp Version
# Same notation as the R version
library(Rcpp)
cppFunction(
'NumericMatrix EM_Rcpp(NumericMatrix rs, NumericVector t, NumericVector w, NumericMatrix cov, int niter) {
int l=rs.ncol(), m=t.size(), n=w.size();
NumericMatrix mu(2, niter);
mu(0, 0) = (sum(rs(0, _))+sum(t))/(l+m);
mu(1, 0) = (sum(rs(1, _))+sum(w))/(l+n);
for (int i=1; i < niter; i++) {
NumericVector u_impute(m), v_impute(n);
u_impute = mu(1, (i-1)) + cov(1, 0)*(1/cov(0, 0))*(t-mu(0, (i-1)));
v_impute = mu(0, (i-1)) + cov(0, 1)*(1/cov(1, 1))*(w-mu(1, (i-1)));
mu(0, i) = (1.0/(l+m+n))*(sum(rs(0, _))+sum(t)+sum(v_impute));
mu(1, i) = (1.0/(l+m+n))*(sum(rs(1, _))+sum(w)+sum(u_impute));
}
return mu;
}')
library(mnormt)
# True means are 10 and 5
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test_R[, niter]
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
test_Rcpp[, niter]
library(microbenchmark)
microbenchmark(
method = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
generic = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 100L
)
microbenchmark(
method = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
generic = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 100L
)
library(mnormt)
# True means are 10 and 5
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
set.seed(543)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
# How does the R version do?
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_R[, niter]
# How does the Rcpp version do?
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_Rcpp[, niter]
library(mnormt)
# True means are 10 and 5
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
set.seed(543)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
# How does the R version do?
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_R[, niter]
# How does the Rcpp version do?
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_Rcpp[, niter]
library(mnormt)
# True means are 10 and 5
mu <- c(10, 5)
cov <- matrix(c(3, 0.5, 0.5, 4), ncol=2, nrow=2, byrow=TRUE)
set.seed(543)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
# How does the R version do?
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_R[, niter]
# How does the Rcpp version do?
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_Rcpp[, niter]
test_Rcpp =test_R
et.seed(543)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
# How does the R version do?
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_R[, niter]
# How does the Rcpp version do?
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_Rcpp[, niter]
set.seed(543)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
# How does the R version do?
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_R[, niter]
# How does the Rcpp version do?
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_Rcpp[, niter]
test_Rcpp==test_R
head(test_R)
test_R[, niter]==test_Rcpp[, niter]
set.seed(543)
samps <- t(rmnorm(n=1000, mean=mu, varcov=cov))
plot(x=samps[1, ], y=samps[2, ])
niter <- 1000
# How does the R version do?
test_R <- EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_R[, niter]
# How does the Rcpp version do?
test_Rcpp <- EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter)
# Estimate at last iteration
test_Rcpp[, niter]
microbenchmark(
method = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
generic = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 100L
)
microbenchmark(
R_version = EM_R(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
Rcpp_version = EM_Rcpp(rs=samps[ , 1:500], t=samps[1, 501:750], w=samps[2, 751:1000],
cov=cov, niter=niter),
times = 100L
)
hist(rnorm(1000, mean=0, sd=rgamma(n=1000, shape=1, rate=0.5)))
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=0.5)))
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=0.5)),breaks=-10:10)
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=0.5)),breaks=-10:10, xlim=c(-10,10))
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=0.5)),breaks=-9:9, xlim=c(-10,10))
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=0.5)), xlim=c(-10,10), breaks=-9:9)
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=0.5)), breaks=-50:50)
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=2)), breaks=-50:50)
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=1/2)), breaks=-50:50)
hist(rnorm(10000, mean=0, sd=rgamma(n=10000, shape=1, rate=1/2)), breaks=-50:50, freq=FALSE)
hist(rnorm(1000, mean=0, sd=sqrt(rexp(1000, rate=2))))
hist(rnorm(1000, mean=0, sd=sqrt(rexp(1000, rate=2))), breaks=-5:5)
hist(rnorm(1000, mean=0, sd=sqrt(rexp(1000, rate=2))), breaks=seq(from=-5, to=5, by=0.1))
hist(rnorm(10000, mean=0, sd=sqrt(rexp(10000, rate=2))), breaks=seq(from=-5, to=5, by=0.1))
hist(rnorm(100000, mean=0, sd=sqrt(rexp(100000, rate=2))), breaks=seq(from=-5, to=5, by=0.1))
hist(rnorm(100000, mean=0, sd=sqrt(rexp(100000, rate=2))), breaks=seq(from=-10, to=10, by=0.1))
install.packages("rmutil")
library("rmutil", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
plot(-10:10, dlaplace(-10:10))
plot(seq(from=-10, to=10, by=0.1), dlaplace(seq(from=-10, to=10, by=0.1)))
hist(rnorm(100000, mean=0, sd=sqrt(rexp(100000, rate=2))), breaks=seq(from=-10, to=10, by=0.1))
plot(seq(from=-10, to=10, by=0.1), dlaplace(seq(from=-10, to=10, by=0.1)), add=TRUE)
curve(dlaplace(x),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(rnorm(100000, mean=0, sd=sqrt(rexp(100000, rate=2))), breaks=seq(from=-10, to=10, by=0.1))
curve(dlaplace(x),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(rnorm(100000, mean=0, sd=sqrt(rexp(100000, rate=2))), breaks=seq(from=-10, to=10, by=0.1), freq=FALSE)
curve(dlaplace(x),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
rlaplace(10000)
hist(rlaplace(10000), freq=FALSE)
hist(rlaplace(10000), freq=FALSE,breaks=seq(from=-10, to=10, by=0.1))
hist(rnorm(100000, mean=0, sd=sqrt(rexp(100000, rate=2))), breaks=seq(from=-10, to=10, by=0.1), freq=FALSE)
curve(function(x)=exp((1-x)/(-2x))*x^(-3/2)*(1-x)^(-1/2), from=0.01, to=0.99)
curve(function(x){exp((1-x)/(-2x))*x^(-3/2)*(1-x)^(-1/2)}, from=0.01, to=0.99)
prof=function(x){exp((1-x)/(-2x))*x^(-3/2)*(1-x)^(-1/2)}
2^4
exp((1-3)/(-23))
curve(function(x){exp((1-x)/(-2*x))*x^(-3/2)*(1-x)^(-1/2)}, from=0.01, to=0.99)
curve(Vectorize(function(x){exp((1-x)/(-2*x))*x^(-3/2)*(1-x)^(-1/2)}), from=0.01, to=0.99)
curve(function(x){exp((1-x)/(-2*x))*x^(-3/2)*(1-x)^(-1/2)}, from=0.01, to=0.99)
prof=function(x){exp((1-x)/(-2*x))*x^(-3/2)*(1-x)^(-1/2)}
prof(0)
prof(1)
prof(0/001)
prof(0/0.1)
prof(0/0.2)
prof(0/0.3)
prof(0.3)
prof(0)
prof(0.1)
prof(1)
prof(0.9)
prof(0.001
)
prof(seq(from=0.01, to=0.99, by=0.01))
prof(0.99)
plot(seq(from=0.01, to=0.99, by=0.01), prof(seq(from=0.01, to=0.99, by=0.01)))
plot(seq(from=0.001, to=0.999, by=0.001), prof(seq(from=0.001, to=0.999, by=0.001)))
load("~/Downloads/Jon/INLA_Horseshoe/Simulations/it_works.RData")
choose(3,2)
combn(9,2)
t(combn(9,2))
setwd("~/Downloads/Jon/inla-horseshoe/src")
